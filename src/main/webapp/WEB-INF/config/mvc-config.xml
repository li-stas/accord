<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:security="http://www.springframework.org/schema/security" xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/mvc
	   http://www.springframework.org/schema/mvc/spring-mvc.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd">

    <!--Spring security enabled annotations-->
    <!--Spring Security включены аннотации-->
    <security:global-method-security pre-post-annotations="enabled" secured-annotations="enabled" jsr250-annotations="enabled"/>

    <!-- context:component-scan This tag will scan @Component, @Repository, @Service, @Controller
         and also resolves @Autowired and @Qualifier -->
    <!--Этот тег будет сканировать ... а также решает-->
    <context:component-scan base-package="ru.javastudy.mvcHtml5Angular.mvc"/>
    <context:component-scan base-package="accord.mvc.model"/>
    <context:component-scan base-package="accord.mvc"/>

    <!--
        mvc:annotation-driven configures Spring MVC annotations
        Support for validating @Controller inputs with @Valid, if a JSR-303 Provider is present on the classpath.
        HttpMessageConverter support for @RequestBody method parameters and @ResponseBody method return values
        from @RequestMapping or @ExceptionHandler methods.
     -->
    <!--
         mvc:annotation-driven настраивает Spring MVC аннотации
         Поддержка проверки входных данных @Controller с помощью @Valid, если на пути к классам присутствует поставщик JSR-303.
         Поддержка HttpMessageConverter для параметров метода @RequestBody и возвращаемых значений метода @ResponseBody
         из методов @RequestMapping или @ExceptionHandler.
         https://overcoder.net/q/632540/%D1%81%D0%B5%D1%80%D0%B8%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F-javatimelocaldate-%D0%B2-json-%D1%81-%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5%D0%BC-%D0%B4%D0%B6%D0%B5%D0%BA%D1%81%D0%BE%D0%BD%D0%B0
    -->

    <mvc:annotation-driven>
        <!--use int RestController to produce pretty json response-->
        <!--используйте int RestController для получения симпатичного ответа json-->
        <mvc:message-converters>
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="objectMapper" ref="customObjectMapper"/>
                <property name="prettyPrint" value="true"/>
            </bean>
        </mvc:message-converters>
    </mvc:annotation-driven>
    <bean id="customObjectMapper" class="accord.mvc.service.CustomObjectMapper"/>

    <!-- activate @Transactional JPA annotation -->
    <tx:annotation-driven/>

    <!-- ViewResolver bean config for mapping strings to jsp views -->
    <!--Конфигурация bean-компонента ViewResolver для сопоставления строк с представлениями jsp-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <!-- Example: a logical view name of 'showMessage' is mapped to '/WEB-INF/jsp/showMessage.jsp' -->
        <!--Пример: имя логического представления 'showMessage' сопоставлено с '/WEB-INF/jsp/showMessage.jsp'-->
        <property name="order" value="1" />
        <property name="prefix" value="/WEB-INF/view/" />
        <property name="suffix" value=".jsp" />
    </bean>

    <!-- File Upload bean config-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- set the maximum file size in bytes -->
        <property name="maxUploadSize" value="1000000"/>
    </bean>

    <!--Excel and PDF xml view configuration -->
    <!--disabling for jUnit test. -->
    <!--<bean class="org.springframework.web.servlet.view.XmlViewResolver">
        <property name="order" value="0" />
        <property name="location" value="/WEB-INF/config/excel-pdf-config.xml"/>
    </bean>-->

    <mvc:view-controller path="/" view-name="/index"/>
    <mvc:view-controller path="/index.html" view-name="/index"/>
    <mvc:view-controller path="/login.html" view-name="/form/login"/>

    <mvc:view-controller path="/jdbcrptord01.html" view-name="/accord/jdbc/jdbcrptord01"/>
    <mvc:view-controller path="/jdbcrpttov01.html" view-name="/accord/jdbc/jdbcrpttov01"/>
    <mvc:view-controller path="/accordorder.html" view-name="/accord/order/apiorder01"/>


    <mvc:view-controller path="/restaccord.html" view-name="/accord/rest/restaccord"/>


    <mvc:view-controller path="/security.html" view-name="/security/security"/>
    <mvc:view-controller path="/security/admin.html" view-name="/security/admin"/>



    <!-- Static Resources Configuration (get access to static sources such as CSS and JavaScript files) -->
    <mvc:resources mapping="/resources/**" location="/resources/" />
    <!-- themes can be put in different folder such as
        <mvc:resources mapping="/resources/**" location="/resources/themeBlue" />
        <mvc:resources mapping="/resources/**" location="/resources/themeGreen" />
     -->

    <!--<mvc:interceptors>
        <mvc:interceptor>
            <mvc:mapping path="/interceptorCall/*"/>
            &lt;!&ndash;need to use ' /** ' not ' /* ' if you want to intercept all requests.&ndash;&gt;
            &lt;!&ndash;<mvc:mapping path="/**"/>&ndash;&gt;
            <bean class="ru.javastudy.mvcHtml5Angular.mvc.interceptors.SiteInterceptor"/>
        </mvc:interceptor>

        <mvc:interceptor>
            <mvc:mapping path="/*" />
            <bean id="localeChangeInterceptor" class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor">
                <property name="paramName" value="languageVar" />
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>-->

    <bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver">
        <property name="defaultLocale" value="ru" />
        <!-- cookieMaxAge in seconds. if you set it to -1, the cookie will be deleted when browser is closed) -->
        <property name="cookieMaxAge" value="100000"/>
    </bean>

    <!-- MessageSource ReloadableResourceBundleMessageSource configuration -->
    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basenames" value="classpath:/locales/messages,classpath:util"/>
        <property name="cacheSeconds" value="1"/>
        <property name="defaultEncoding" value="UTF-8" />
    </bean>

</beans>